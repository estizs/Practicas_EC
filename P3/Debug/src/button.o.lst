   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"button.c"
  21              	.Ltext0:
  22              		.file 1 "../src/button.c"
 1728              		.align	2
 1729              		.global	read_button
 1731              	read_button:
 1732              	.LFB0:
   1:../src/button.c **** /*-------------------------------------------------------------------
   2:../src/button.c **** **
   3:../src/button.c **** **  Fichero:
   4:../src/button.c **** **    button.c  10/6/2014
   5:../src/button.c **** **
   6:../src/button.c **** **    Estructura de Computadores
   7:../src/button.c **** **    Dpto. de Arquitectura de Computadores y Automï¿½tica
   8:../src/button.c **** **    Facultad de Informï¿½tica. Universidad Complutense de Madrid
   9:../src/button.c **** **
  10:../src/button.c **** **  Propï¿½sito:
  11:../src/button.c **** **    Contiene las implementaciones de las funciones
  12:../src/button.c **** **    para la gestiï¿½n de los pulsadores de la placa de prototipado
  13:../src/button.c **** **
  14:../src/button.c **** **  Notas de diseï¿½o:
  15:../src/button.c **** **
  16:../src/button.c **** **-----------------------------------------------------------------*/
  17:../src/button.c **** 
  18:../src/button.c **** #include "44b.h"
  19:../src/button.c **** #include "utils.h"
  20:../src/button.c **** #include "button.h"
  21:../src/button.c **** #include "leds.h"
  22:../src/button.c **** #include "gpio.h"
  23:../src/button.c **** 
  24:../src/button.c **** unsigned int read_button(void)
  25:../src/button.c **** {
 1733              		.loc 1 25 0
 1734              		.cfi_startproc
 1735              		@ Function supports interworking.
 1736              		@ args = 0, pretend = 0, frame = 8
 1737              		@ frame_needed = 1, uses_anonymous_args = 0
 1738 0000 0DC0A0E1 		mov	ip, sp
 1739              	.LCFI0:
 1740              		.cfi_def_cfa_register 12
 1741 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1742 0008 04B04CE2 		sub	fp, ip, #4
 1743              		.cfi_offset 14, -8
 1744              		.cfi_offset 13, -12
 1745              		.cfi_offset 11, -16
 1746              	.LCFI1:
 1747              		.cfi_def_cfa 11, 4
 1748 000c 08D04DE2 		sub	sp, sp, #8
  26:../src/button.c **** 	unsigned int buttons = 0;
 1749              		.loc 1 26 0
 1750 0010 0030A0E3 		mov	r3, #0
 1751 0014 10300BE5 		str	r3, [fp, #-16]
  27:../src/button.c **** 	enum digital val;
  28:../src/button.c **** 
  29:../src/button.c **** 	//COMPLETAR: tomar el cÃ³digo de prÃ¡cticas anteirores
  30:../src/button.c **** 	// Leemos la señal digital recibida en el pin 6
  31:../src/button.c **** 		portG_read(6, &val);
 1752              		.loc 1 31 0
 1753 0018 11304BE2 		sub	r3, fp, #17
 1754 001c 0600A0E3 		mov	r0, #6
 1755 0020 0310A0E1 		mov	r1, r3
 1756 0024 FEFFFFEB 		bl	portG_read
  32:../src/button.c **** 		// Si el botón está pulsado (a LOW) entonces lo señalamos en buttons y lo mismo para
  33:../src/button.c **** 		// el otro botón
  34:../src/button.c **** 		if(val == LOW)
 1757              		.loc 1 34 0
 1758 0028 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1759 002c 000053E3 		cmp	r3, #0
 1760 0030 0300001A 		bne	.L2
  35:../src/button.c **** 			buttons = buttons | (0x1);
 1761              		.loc 1 35 0
 1762 0034 10301BE5 		ldr	r3, [fp, #-16]
 1763 0038 013083E3 		orr	r3, r3, #1
 1764 003c 10300BE5 		str	r3, [fp, #-16]
 1765 0040 020000EA 		b	.L3
 1766              	.L2:
  36:../src/button.c **** 		else
  37:../src/button.c **** 			buttons = buttons & ~(0x1);
 1767              		.loc 1 37 0
 1768 0044 10301BE5 		ldr	r3, [fp, #-16]
 1769 0048 0130C3E3 		bic	r3, r3, #1
 1770 004c 10300BE5 		str	r3, [fp, #-16]
 1771              	.L3:
  38:../src/button.c **** 		// Leemos la señal digital recibida en el pin 7
  39:../src/button.c **** 		portG_read(7, &val);
 1772              		.loc 1 39 0
 1773 0050 11304BE2 		sub	r3, fp, #17
 1774 0054 0700A0E3 		mov	r0, #7
 1775 0058 0310A0E1 		mov	r1, r3
 1776 005c FEFFFFEB 		bl	portG_read
  40:../src/button.c **** 		if(val == LOW)
 1777              		.loc 1 40 0
 1778 0060 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1779 0064 000053E3 		cmp	r3, #0
 1780 0068 0300001A 		bne	.L4
  41:../src/button.c **** 			buttons = buttons | (0x1 << 1);
 1781              		.loc 1 41 0
 1782 006c 10301BE5 		ldr	r3, [fp, #-16]
 1783 0070 023083E3 		orr	r3, r3, #2
 1784 0074 10300BE5 		str	r3, [fp, #-16]
 1785 0078 020000EA 		b	.L5
 1786              	.L4:
  42:../src/button.c **** 		else
  43:../src/button.c **** 			buttons = buttons & ~(0x1 << 1);
 1787              		.loc 1 43 0
 1788 007c 10301BE5 		ldr	r3, [fp, #-16]
 1789 0080 0230C3E3 		bic	r3, r3, #2
 1790 0084 10300BE5 		str	r3, [fp, #-16]
 1791              	.L5:
  44:../src/button.c **** 
  45:../src/button.c **** 	return buttons;
 1792              		.loc 1 45 0
 1793 0088 10301BE5 		ldr	r3, [fp, #-16]
  46:../src/button.c **** }
 1794              		.loc 1 46 0
 1795 008c 0300A0E1 		mov	r0, r3
 1796 0090 0CD04BE2 		sub	sp, fp, #12
 1797 0094 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1798 0098 1EFF2FE1 		bx	lr
 1799              		.cfi_endproc
 1800              	.LFE0:
 1802              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 button.c
C:\Users\estib\AppData\Local\Temp\ccI3Tkql.s:1728   .text:00000000 $a
C:\Users\estib\AppData\Local\Temp\ccI3Tkql.s:1731   .text:00000000 read_button
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
portG_read
