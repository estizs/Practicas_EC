   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  21              	.Ltext0:
  22              		.file 1 "../src/main.c"
 2760              		.align	2
 2763              	RL:
 2764 0000 00000000 		.word	0
 2765 0004 05000000 		.word	5
 2766 0008 00000000 		.word	0
 2767 000c 00000000 		.word	0
 2768 0010 00000000 		.word	0
 2769              		.text
 2770              		.align	2
 2771              		.global	timer_ISR
 2773              	timer_ISR:
 2774              	.LFB0:
   1:../src/main.c **** #include <stdio.h>
   2:../src/main.c **** #include "44b.h"
   3:../src/main.c **** #include "button.h"
   4:../src/main.c **** #include "leds.h"
   5:../src/main.c **** #include "utils.h"
   6:../src/main.c **** #include "D8Led.h"
   7:../src/main.c **** #include "intcontroller.h"
   8:../src/main.c **** #include "timer.h"
   9:../src/main.c **** #include "gpio.h"
  10:../src/main.c **** #include "keyboard.h"
  11:../src/main.c **** 
  12:../src/main.c **** struct RLstat {
  13:../src/main.c **** 	int moving;
  14:../src/main.c **** 	int speed;
  15:../src/main.c **** 	int direction;
  16:../src/main.c **** 	int position;
  17:../src/main.c **** 	int contador;
  18:../src/main.c **** };
  19:../src/main.c **** 
  20:../src/main.c **** static struct RLstat RL = {
  21:../src/main.c **** 	.moving = 0,
  22:../src/main.c **** 	.speed = 5,
  23:../src/main.c **** 	.direction = 0,
  24:../src/main.c **** 	.position = 0,
  25:../src/main.c **** 	.contador = 0,
  26:../src/main.c **** };
  27:../src/main.c **** 
  28:../src/main.c **** void timer_ISR(void) __attribute__ ((interrupt ("IRQ")));
  29:../src/main.c **** void button_ISR(void) __attribute__ ((interrupt ("IRQ")));
  30:../src/main.c **** void keyboard_ISR(void) __attribute__ ((interrupt ("IRQ")));
  31:../src/main.c **** 
  32:../src/main.c **** void timer_ISR(void)
  33:../src/main.c **** {
 2775              		.loc 1 33 0
 2776              		.cfi_startproc
 2777              		@ Interrupt Service Routine.
 2778              		@ args = 0, pretend = 0, frame = 0
 2779              		@ frame_needed = 1, uses_anonymous_args = 0
 2780 0000 04C02DE5 		str	ip, [sp, #-4]!
 2781 0004 0DC0A0E1 		mov	ip, sp
 2782              	.LCFI0:
 2783              		.cfi_def_cfa_register 12
 2784 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2785 000c 04B04CE2 		sub	fp, ip, #4
 2786              		.cfi_offset 14, -8
 2787              		.cfi_offset 13, -12
 2788              		.cfi_offset 11, -16
 2789              		.cfi_offset 3, -20
 2790              		.cfi_offset 2, -24
 2791              		.cfi_offset 1, -28
 2792              		.cfi_offset 0, -32
 2793              	.LCFI1:
 2794              		.cfi_def_cfa 11, 4
  34:../src/main.c **** 	//COMPLETAR: tomar el código de avance de posición del led rotante de la práctica anterior
  35:../src/main.c **** 	if(RL.direction) ++RL.position;
 2795              		.loc 1 35 0
 2796 0010 8C309FE5 		ldr	r3, .L6
 2797 0014 083093E5 		ldr	r3, [r3, #8]
 2798 0018 000053E3 		cmp	r3, #0
 2799 001c 0500000A 		beq	.L2
 2800              		.loc 1 35 0 is_stmt 0 discriminator 1
 2801 0020 7C309FE5 		ldr	r3, .L6
 2802 0024 0C3093E5 		ldr	r3, [r3, #12]
 2803 0028 012083E2 		add	r2, r3, #1
 2804 002c 70309FE5 		ldr	r3, .L6
 2805 0030 0C2083E5 		str	r2, [r3, #12]
 2806 0034 040000EA 		b	.L3
 2807              	.L2:
  36:../src/main.c **** 	else --RL.position;
 2808              		.loc 1 36 0 is_stmt 1
 2809 0038 64309FE5 		ldr	r3, .L6
 2810 003c 0C3093E5 		ldr	r3, [r3, #12]
 2811 0040 012043E2 		sub	r2, r3, #1
 2812 0044 58309FE5 		ldr	r3, .L6
 2813 0048 0C2083E5 		str	r2, [r3, #12]
 2814              	.L3:
  37:../src/main.c **** 	if(RL.position < 0) RL.position = 5;
 2815              		.loc 1 37 0
 2816 004c 50309FE5 		ldr	r3, .L6
 2817 0050 0C3093E5 		ldr	r3, [r3, #12]
 2818 0054 000053E3 		cmp	r3, #0
 2819 0058 020000AA 		bge	.L4
 2820              		.loc 1 37 0 is_stmt 0 discriminator 1
 2821 005c 40309FE5 		ldr	r3, .L6
 2822 0060 0520A0E3 		mov	r2, #5
 2823 0064 0C2083E5 		str	r2, [r3, #12]
 2824              	.L4:
  38:../src/main.c **** 	if(RL.position > 5) RL.position = 0;
 2825              		.loc 1 38 0 is_stmt 1
 2826 0068 34309FE5 		ldr	r3, .L6
 2827 006c 0C3093E5 		ldr	r3, [r3, #12]
 2828 0070 050053E3 		cmp	r3, #5
 2829 0074 020000DA 		ble	.L5
 2830              		.loc 1 38 0 is_stmt 0 discriminator 1
 2831 0078 24309FE5 		ldr	r3, .L6
 2832 007c 0020A0E3 		mov	r2, #0
 2833 0080 0C2083E5 		str	r2, [r3, #12]
 2834              	.L5:
  39:../src/main.c **** 
  40:../src/main.c **** 	D8Led_segment(RL.position);
 2835              		.loc 1 40 0 is_stmt 1
 2836 0084 18309FE5 		ldr	r3, .L6
 2837 0088 0C3093E5 		ldr	r3, [r3, #12]
 2838 008c 0300A0E1 		mov	r0, r3
 2839 0090 FEFFFFEB 		bl	D8Led_segment
  41:../src/main.c **** }
 2840              		.loc 1 41 0
 2841 0094 1CD04BE2 		sub	sp, fp, #28
 2842 0098 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2843 009c 04C09DE4 		ldmfd	sp!, {ip}
 2844 00a0 04F05EE2 		subs	pc, lr, #4
 2845              	.L7:
 2846              		.align	2
 2847              	.L6:
 2848 00a4 00000000 		.word	RL
 2849              		.cfi_endproc
 2850              	.LFE0:
 2852              		.align	2
 2853              		.global	button_ISR
 2855              	button_ISR:
 2856              	.LFB1:
  42:../src/main.c **** 
  43:../src/main.c **** void button_ISR(void)
  44:../src/main.c **** {
 2857              		.loc 1 44 0
 2858              		.cfi_startproc
 2859              		@ Interrupt Service Routine.
 2860              		@ args = 0, pretend = 0, frame = 8
 2861              		@ frame_needed = 1, uses_anonymous_args = 0
 2862 00a8 04C02DE5 		str	ip, [sp, #-4]!
 2863 00ac 0DC0A0E1 		mov	ip, sp
 2864              	.LCFI2:
 2865              		.cfi_def_cfa_register 12
 2866 00b0 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2867 00b4 04B04CE2 		sub	fp, ip, #4
 2868              		.cfi_offset 14, -8
 2869              		.cfi_offset 13, -12
 2870              		.cfi_offset 11, -16
 2871              		.cfi_offset 3, -20
 2872              		.cfi_offset 2, -24
 2873              		.cfi_offset 1, -28
 2874              		.cfi_offset 0, -32
 2875              	.LCFI3:
 2876              		.cfi_def_cfa 11, 4
 2877 00b8 08D04DE2 		sub	sp, sp, #8
  45:../src/main.c **** 	unsigned int whicheint = rEXTINTPND;
 2878              		.loc 1 45 0
 2879 00bc 04319FE5 		ldr	r3, .L15
 2880 00c0 003093E5 		ldr	r3, [r3, #0]
 2881 00c4 20300BE5 		str	r3, [fp, #-32]
  46:../src/main.c **** 	unsigned int buttons = (whicheint >> 2) & 0x3;
 2882              		.loc 1 46 0
 2883 00c8 20301BE5 		ldr	r3, [fp, #-32]
 2884 00cc 2331A0E1 		mov	r3, r3, lsr #2
 2885 00d0 033003E2 		and	r3, r3, #3
 2886 00d4 24300BE5 		str	r3, [fp, #-36]
  47:../src/main.c **** 
  48:../src/main.c **** 	//COMPLETAR: usar el código de la primera parte parte de atención a los
  49:../src/main.c **** 	//pulsadores
  50:../src/main.c **** 	if (buttons & BUT1) {
 2887              		.loc 1 50 0
 2888 00d8 24301BE5 		ldr	r3, [fp, #-36]
 2889 00dc 013003E2 		and	r3, r3, #1
 2890 00e0 FF3003E2 		and	r3, r3, #255
 2891 00e4 000053E3 		cmp	r3, #0
 2892 00e8 0C00000A 		beq	.L9
  51:../src/main.c **** 		// Apagamos los leds
  52:../src/main.c **** 		led1_off();
 2893              		.loc 1 52 0
 2894 00ec FEFFFFEB 		bl	led1_off
  53:../src/main.c **** 		led2_off();
 2895              		.loc 1 53 0
 2896 00f0 FEFFFFEB 		bl	led2_off
  54:../src/main.c **** 		// Invertimos la dirección del RL
  55:../src/main.c **** 		if(RL.direction) RL.direction = 0;
 2897              		.loc 1 55 0
 2898 00f4 D0309FE5 		ldr	r3, .L15+4
 2899 00f8 083093E5 		ldr	r3, [r3, #8]
 2900 00fc 000053E3 		cmp	r3, #0
 2901 0100 0300000A 		beq	.L10
 2902              		.loc 1 55 0 is_stmt 0 discriminator 1
 2903 0104 C0309FE5 		ldr	r3, .L15+4
 2904 0108 0020A0E3 		mov	r2, #0
 2905 010c 082083E5 		str	r2, [r3, #8]
 2906 0110 020000EA 		b	.L9
 2907              	.L10:
  56:../src/main.c **** 		else RL.direction = 1;
 2908              		.loc 1 56 0 is_stmt 1
 2909 0114 B0309FE5 		ldr	r3, .L15+4
 2910 0118 0120A0E3 		mov	r2, #1
 2911 011c 082083E5 		str	r2, [r3, #8]
 2912              	.L9:
  57:../src/main.c **** 		}
  58:../src/main.c **** 
  59:../src/main.c **** 	if (buttons & BUT2) {
 2913              		.loc 1 59 0
 2914 0120 24301BE5 		ldr	r3, [fp, #-36]
 2915 0124 023003E2 		and	r3, r3, #2
 2916 0128 000053E3 		cmp	r3, #0
 2917 012c 1700000A 		beq	.L11
  60:../src/main.c **** 		++RL.contador;
 2918              		.loc 1 60 0
 2919 0130 94309FE5 		ldr	r3, .L15+4
 2920 0134 103093E5 		ldr	r3, [r3, #16]
 2921 0138 012083E2 		add	r2, r3, #1
 2922 013c 88309FE5 		ldr	r3, .L15+4
 2923 0140 102083E5 		str	r2, [r3, #16]
  61:../src/main.c **** 		if(RL.contador % 2 == 0) // Si este es par entonces conmuto el LED1
 2924              		.loc 1 61 0
 2925 0144 80309FE5 		ldr	r3, .L15+4
 2926 0148 103093E5 		ldr	r3, [r3, #16]
 2927 014c 013003E2 		and	r3, r3, #1
 2928 0150 000053E3 		cmp	r3, #0
 2929 0154 0100001A 		bne	.L12
  62:../src/main.c **** 			led1_switch();
 2930              		.loc 1 62 0
 2931 0158 FEFFFFEB 		bl	led1_switch
 2932 015c 000000EA 		b	.L13
 2933              	.L12:
  63:../src/main.c **** 		else // Si es impar conmuto LED2
  64:../src/main.c **** 			led2_switch();
 2934              		.loc 1 64 0
 2935 0160 FEFFFFEB 		bl	led2_switch
 2936              	.L13:
  65:../src/main.c **** 		// Conmuto el campo moving
  66:../src/main.c **** 		if(RL.moving) RL.moving = 0;
 2937              		.loc 1 66 0
 2938 0164 60309FE5 		ldr	r3, .L15+4
 2939 0168 003093E5 		ldr	r3, [r3, #0]
 2940 016c 000053E3 		cmp	r3, #0
 2941 0170 0300000A 		beq	.L14
 2942              		.loc 1 66 0 is_stmt 0 discriminator 1
 2943 0174 50309FE5 		ldr	r3, .L15+4
 2944 0178 0020A0E3 		mov	r2, #0
 2945 017c 002083E5 		str	r2, [r3, #0]
 2946 0180 020000EA 		b	.L11
 2947              	.L14:
  67:../src/main.c **** 		else RL.moving = 1;
 2948              		.loc 1 67 0 is_stmt 1
 2949 0184 40309FE5 		ldr	r3, .L15+4
 2950 0188 0120A0E3 		mov	r2, #1
 2951 018c 002083E5 		str	r2, [r3, #0]
 2952              	.L11:
  68:../src/main.c **** 	}
  69:../src/main.c **** 	// eliminamos rebotes
  70:../src/main.c **** 	Delay(2000);
 2953              		.loc 1 70 0
 2954 0190 7D0EA0E3 		mov	r0, #2000
 2955 0194 FEFFFFEB 		bl	Delay
  71:../src/main.c **** 	// borramos el flag en extintpnd
  72:../src/main.c **** 	//COMPLETAR: debemos borrar las peticiones de interrupción en
  73:../src/main.c **** 			         //EXTINTPND escribiendo un 1 en los flags que queremos borrar (los
  74:../src/main.c **** 					 //correspondientes a los pulsadores pulsados)
  75:../src/main.c **** 	rEXTINTPND = rEXTINTPND | (0x1 << buttons);
 2956              		.loc 1 75 0
 2957 0198 28309FE5 		ldr	r3, .L15
 2958 019c 24209FE5 		ldr	r2, .L15
 2959 01a0 001092E5 		ldr	r1, [r2, #0]
 2960 01a4 24201BE5 		ldr	r2, [fp, #-36]
 2961 01a8 0100A0E3 		mov	r0, #1
 2962 01ac 1022A0E1 		mov	r2, r0, asl r2
 2963 01b0 022081E1 		orr	r2, r1, r2
 2964 01b4 002083E5 		str	r2, [r3, #0]
  76:../src/main.c **** }
 2965              		.loc 1 76 0
 2966 01b8 1CD04BE2 		sub	sp, fp, #28
 2967 01bc 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2968 01c0 04C09DE4 		ldmfd	sp!, {ip}
 2969 01c4 04F05EE2 		subs	pc, lr, #4
 2970              	.L16:
 2971              		.align	2
 2972              	.L15:
 2973 01c8 5400D201 		.word	30539860
 2974 01cc 00000000 		.word	RL
 2975              		.cfi_endproc
 2976              	.LFE1:
 2978              		.align	2
 2979              		.global	keyboard_ISR
 2981              	keyboard_ISR:
 2982              	.LFB2:
  77:../src/main.c **** 
  78:../src/main.c **** // NO HAY QUE HACERLA
  79:../src/main.c **** void keyboard_ISR(void)
  80:../src/main.c **** {
 2983              		.loc 1 80 0
 2984              		.cfi_startproc
 2985              		@ Interrupt Service Routine.
 2986              		@ args = 0, pretend = 0, frame = 8
 2987              		@ frame_needed = 1, uses_anonymous_args = 0
 2988 01d0 04C02DE5 		str	ip, [sp, #-4]!
 2989 01d4 0DC0A0E1 		mov	ip, sp
 2990              	.LCFI4:
 2991              		.cfi_def_cfa_register 12
 2992 01d8 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2993 01dc 04B04CE2 		sub	fp, ip, #4
 2994              		.cfi_offset 14, -8
 2995              		.cfi_offset 13, -12
 2996              		.cfi_offset 11, -16
 2997              		.cfi_offset 3, -20
 2998              		.cfi_offset 2, -24
 2999              		.cfi_offset 1, -28
 3000              		.cfi_offset 0, -32
 3001              	.LCFI5:
 3002              		.cfi_def_cfa 11, 4
 3003 01e0 08D04DE2 		sub	sp, sp, #8
  81:../src/main.c **** 	int key;
  82:../src/main.c **** 
  83:../src/main.c **** 	/* Eliminar rebotes de presión */
  84:../src/main.c **** 	Delay(200);
 3004              		.loc 1 84 0
 3005 01e4 C800A0E3 		mov	r0, #200
 3006 01e8 FEFFFFEB 		bl	Delay
  85:../src/main.c **** 	
  86:../src/main.c **** 	/* Escaneo de tecla */
  87:../src/main.c **** 	key = kb_scan();
 3007              		.loc 1 87 0
 3008 01ec FEFFFFEB 		bl	kb_scan
 3009 01f0 20000BE5 		str	r0, [fp, #-32]
  88:../src/main.c **** 
  89:../src/main.c **** 	if (key != -1) {
 3010              		.loc 1 89 0
 3011 01f4 20301BE5 		ldr	r3, [fp, #-32]
 3012 01f8 010073E3 		cmn	r3, #1
 3013 01fc 0800000A 		beq	.L18
  90:../src/main.c **** 		/* Visualizacion en el display */
  91:../src/main.c **** 		//COMPLETAR: mostrar la tecla en el display utilizando el interfaz
  92:../src/main.c **** 		//definido en D8Led.h
  93:../src/main.c **** 
  94:../src/main.c **** 		switch (key) {
 3014              		.loc 1 94 0
 3015 0200 20301BE5 		ldr	r3, [fp, #-32]
 3016 0204 030053E3 		cmp	r3, #3
 3017 0208 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 3018 020c 030000EA 		b	.L25
 3019              	.L24:
 3020 0210 20020000 		.word	.L25
 3021 0214 20020000 		.word	.L25
 3022 0218 20020000 		.word	.L25
 3023 021c 20020000 		.word	.L25
 3024              	.L25:
  95:../src/main.c **** 			case 0:
  96:../src/main.c **** 				//COMPLETAR: poner en timer0 divisor 1/8 y contador 62500
  97:../src/main.c **** 				break;
  98:../src/main.c **** 			case 1:
  99:../src/main.c **** 				//COMPLETAR: poner en timer0 timer divisor 1/8 y contador 31250
 100:../src/main.c **** 				break;
 101:../src/main.c **** 			case 2:
 102:../src/main.c **** 				//COMPLETAR: poner en timer0 timer divisor 1/8 y contador 15625
 103:../src/main.c **** 				break;
 104:../src/main.c **** 			case 3:
 105:../src/main.c **** 				//COMPLETAR: poner en timer0 timer divisor 1/4 y contador 15625
 106:../src/main.c **** 				break;
 107:../src/main.c **** 			default:
 108:../src/main.c **** 				break;
 3025              		.loc 1 108 0
 3026 0220 0000A0E1 		mov	r0, r0	@ nop
 3027              	.L18:
 109:../src/main.c **** 		}
 110:../src/main.c **** 		
 111:../src/main.c **** 		/* Esperar a que la tecla se suelte, consultando el registro de datos */
 112:../src/main.c **** 		//while (/*COMPLETAR: true si está pulsada la tecla (leer del registro rPDATG)*/);
 113:../src/main.c **** 	}
 114:../src/main.c **** 
 115:../src/main.c ****     /* Eliminar rebotes de depresión */
 116:../src/main.c ****     Delay(200);
 3028              		.loc 1 116 0
 3029 0224 C800A0E3 		mov	r0, #200
 3030 0228 FEFFFFEB 		bl	Delay
 117:../src/main.c ****      
 118:../src/main.c ****     /* Borrar interrupciones pendientes */
 119:../src/main.c **** 	//COMPLETAR
 120:../src/main.c **** 	//borrar la interrupción por la línea EINT1 en el registro rI_ISPC
 121:../src/main.c **** }
 3031              		.loc 1 121 0
 3032 022c 1CD04BE2 		sub	sp, fp, #28
 3033 0230 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3034 0234 04C09DE4 		ldmfd	sp!, {ip}
 3035 0238 04F05EE2 		subs	pc, lr, #4
 3036              		.cfi_endproc
 3037              	.LFE2:
 3039              		.align	2
 3040              		.global	setup
 3042              	setup:
 3043              	.LFB3:
 122:../src/main.c **** 
 123:../src/main.c **** int setup(void)
 124:../src/main.c **** {
 3044              		.loc 1 124 0
 3045              		.cfi_startproc
 3046              		@ Function supports interworking.
 3047              		@ args = 0, pretend = 0, frame = 0
 3048              		@ frame_needed = 1, uses_anonymous_args = 0
 3049 023c 0DC0A0E1 		mov	ip, sp
 3050              	.LCFI6:
 3051              		.cfi_def_cfa_register 12
 3052 0240 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3053 0244 04B04CE2 		sub	fp, ip, #4
 3054              		.cfi_offset 14, -8
 3055              		.cfi_offset 13, -12
 3056              		.cfi_offset 11, -16
 3057              	.LCFI7:
 3058              		.cfi_def_cfa 11, 4
 125:../src/main.c **** 	leds_init();
 3059              		.loc 1 125 0
 3060 0248 FEFFFFEB 		bl	leds_init
 126:../src/main.c **** 	D8Led_init();
 3061              		.loc 1 126 0
 3062 024c FEFFFFEB 		bl	D8Led_init
 127:../src/main.c **** 	D8Led_segment(RL.position);
 3063              		.loc 1 127 0
 3064 0250 14319FE5 		ldr	r3, .L28
 3065 0254 0C3093E5 		ldr	r3, [r3, #12]
 3066 0258 0300A0E1 		mov	r0, r3
 3067 025c FEFFFFEB 		bl	D8Led_segment
 128:../src/main.c **** 
 129:../src/main.c **** 	/* Port G: configuración para generación de interrupciones externas,
 130:../src/main.c **** 	 *         botones y teclado
 131:../src/main.c **** 	 **/
 132:../src/main.c **** 
 133:../src/main.c **** 	//COMPLETAR: utilizando el interfaz para el puerto G definido en gpio.h
 134:../src/main.c **** 	//configurar los pines 1, 6 y 7 del puerto G para poder generar interrupciones
 135:../src/main.c **** 	//externas por flanco de bajada por ellos y activar las correspondientes
 136:../src/main.c **** 	//resistencias de pull-up.
 137:../src/main.c **** 
 138:../src/main.c **** 	// para generar interrupciones internas
 139:../src/main.c **** 	portG_conf(1, EINT);
 3068              		.loc 1 139 0
 3069 0260 0100A0E3 		mov	r0, #1
 3070 0264 0310A0E3 		mov	r1, #3
 3071 0268 FEFFFFEB 		bl	portG_conf
 140:../src/main.c **** 	portG_conf(6, EINT);
 3072              		.loc 1 140 0
 3073 026c 0600A0E3 		mov	r0, #6
 3074 0270 0310A0E3 		mov	r1, #3
 3075 0274 FEFFFFEB 		bl	portG_conf
 141:../src/main.c **** 	portG_conf(7, EINT);
 3076              		.loc 1 141 0
 3077 0278 0700A0E3 		mov	r0, #7
 3078 027c 0310A0E3 		mov	r1, #3
 3079 0280 FEFFFFEB 		bl	portG_conf
 142:../src/main.c **** 
 143:../src/main.c **** 	// flanco de bajada
 144:../src/main.c **** 	portG_eint_trig(1, FALLING);
 3080              		.loc 1 144 0
 3081 0284 0100A0E3 		mov	r0, #1
 3082 0288 0210A0E3 		mov	r1, #2
 3083 028c FEFFFFEB 		bl	portG_eint_trig
 145:../src/main.c **** 	portG_eint_trig(6, FALLING);
 3084              		.loc 1 145 0
 3085 0290 0600A0E3 		mov	r0, #6
 3086 0294 0210A0E3 		mov	r1, #2
 3087 0298 FEFFFFEB 		bl	portG_eint_trig
 146:../src/main.c **** 	portG_eint_trig(7, FALLING);
 3088              		.loc 1 146 0
 3089 029c 0700A0E3 		mov	r0, #7
 3090 02a0 0210A0E3 		mov	r1, #2
 3091 02a4 FEFFFFEB 		bl	portG_eint_trig
 147:../src/main.c **** 
 148:../src/main.c **** 	// activar resistencias pull-up
 149:../src/main.c **** 	portG_conf_pup(1, ENABLE);
 3092              		.loc 1 149 0
 3093 02a8 0100A0E3 		mov	r0, #1
 3094 02ac 0110A0E3 		mov	r1, #1
 3095 02b0 FEFFFFEB 		bl	portG_conf_pup
 150:../src/main.c **** 	portG_conf_pup(6, ENABLE);
 3096              		.loc 1 150 0
 3097 02b4 0600A0E3 		mov	r0, #6
 3098 02b8 0110A0E3 		mov	r1, #1
 3099 02bc FEFFFFEB 		bl	portG_conf_pup
 151:../src/main.c **** 	portG_conf_pup(7, ENABLE);
 3100              		.loc 1 151 0
 3101 02c0 0700A0E3 		mov	r0, #7
 3102 02c4 0110A0E3 		mov	r1, #1
 3103 02c8 FEFFFFEB 		bl	portG_conf_pup
 152:../src/main.c **** 
 153:../src/main.c **** 
 154:../src/main.c **** 	/********************************************************************/
 155:../src/main.c **** 
 156:../src/main.c **** 	/* Configuración del timer */
 157:../src/main.c **** 
 158:../src/main.c **** 	//COMPLETAR: tomar el código de la segunda parte
 159:../src/main.c **** 
 160:../src/main.c **** 	if (RL.moving)
 3104              		.loc 1 160 0
 3105 02cc 98309FE5 		ldr	r3, .L28
 3106 02d0 003093E5 		ldr	r3, [r3, #0]
 3107 02d4 000053E3 		cmp	r3, #0
 3108 02d8 0100000A 		beq	.L27
 161:../src/main.c **** 		tmr_start(TIMER0);
 3109              		.loc 1 161 0
 3110 02dc 0000A0E3 		mov	r0, #0
 3111 02e0 FEFFFFEB 		bl	tmr_start
 3112              	.L27:
 162:../src/main.c **** 	/***************************/
 163:../src/main.c **** 
 164:../src/main.c **** 	// Registramos las ISRs
 165:../src/main.c **** 	//COMPLETAR: registrar la RTI del timer
 166:../src/main.c **** 	pISR_TIMER0 = timer_ISR;
 3113              		.loc 1 166 0
 3114 02e4 84309FE5 		ldr	r3, .L28+4
 3115 02e8 84209FE5 		ldr	r2, .L28+8
 3116 02ec 002083E5 		str	r2, [r3, #0]
 167:../src/main.c **** 	//COMPLETAR: registrar la RTI de los botones
 168:../src/main.c **** 	pISR_EINT4567 = button_ISR;
 3117              		.loc 1 168 0
 3118 02f0 80309FE5 		ldr	r3, .L28+12
 3119 02f4 80209FE5 		ldr	r2, .L28+16
 3120 02f8 002083E5 		str	r2, [r3, #0]
 169:../src/main.c **** 	//pISR_EINT1    = //COMPLETAR: registrar la RTI del teclado
 170:../src/main.c **** 
 171:../src/main.c **** 	/* Configuración del controlador de interrupciones
 172:../src/main.c **** 	 * Habilitamos la línea IRQ, en modo vectorizado
 173:../src/main.c **** 	 * Configuramos el timer 0 en modo IRQ y habilitamos esta línea
 174:../src/main.c **** 	 * Configuramos la línea EINT4567 en modo IRQ y la habilitamos
 175:../src/main.c **** 	 * Configuramos la línea EINT1 en modo IRQ y la habilitamos
 176:../src/main.c **** 	 */
 177:../src/main.c **** 
 178:../src/main.c **** 	ic_init();
 3121              		.loc 1 178 0
 3122 02fc FEFFFFEB 		bl	ic_init
 179:../src/main.c **** 	//COMPLETAR: utilizando el interfaz definido en intcontroller.h
 180:../src/main.c **** 	//		habilitar la línea IRQ en modo vectorizado
 181:../src/main.c **** 	//		deshabilitar la línea FIQ
 182:../src/main.c **** 	//		configurar la línea INT_TIMER0 en modo IRQ
 183:../src/main.c **** 	//		configurar la línea INT_EINT4567 en modo IRQ
 184:../src/main.c **** 	//		configurar la línea INT_EINT1 en modo IRQ
 185:../src/main.c **** 	//		habilitar la línea INT_TIMER0
 186:../src/main.c **** 	//		habilitar la línea INT_EINT4567
 187:../src/main.c **** 	//		habilitar la línea INT_EINT1
 188:../src/main.c **** 
 189:../src/main.c **** 	/***************************************************/
 190:../src/main.c **** 	ic_conf_irq(ENABLE, VEC);
 3123              		.loc 1 190 0
 3124 0300 0100A0E3 		mov	r0, #1
 3125 0304 0010A0E3 		mov	r1, #0
 3126 0308 FEFFFFEB 		bl	ic_conf_irq
 191:../src/main.c **** 	ic_conf_fiq(DISABLE);
 3127              		.loc 1 191 0
 3128 030c 0000A0E3 		mov	r0, #0
 3129 0310 FEFFFFEB 		bl	ic_conf_fiq
 192:../src/main.c **** 	ic_conf_line(INT_TIMER0, IRQ);
 3130              		.loc 1 192 0
 3131 0314 0D00A0E3 		mov	r0, #13
 3132 0318 0010A0E3 		mov	r1, #0
 3133 031c FEFFFFEB 		bl	ic_conf_line
 193:../src/main.c **** 	ic_conf_line(INT_EINT4567, IRQ);
 3134              		.loc 1 193 0
 3135 0320 1500A0E3 		mov	r0, #21
 3136 0324 0010A0E3 		mov	r1, #0
 3137 0328 FEFFFFEB 		bl	ic_conf_line
 194:../src/main.c **** 	ic_conf_line(INT_EINT1, IRQ);
 3138              		.loc 1 194 0
 3139 032c 1800A0E3 		mov	r0, #24
 3140 0330 0010A0E3 		mov	r1, #0
 3141 0334 FEFFFFEB 		bl	ic_conf_line
 195:../src/main.c **** 	ic_enable(INT_TIMER0);
 3142              		.loc 1 195 0
 3143 0338 0D00A0E3 		mov	r0, #13
 3144 033c FEFFFFEB 		bl	ic_enable
 196:../src/main.c **** 	ic_enable(INT_EINT4567);
 3145              		.loc 1 196 0
 3146 0340 1500A0E3 		mov	r0, #21
 3147 0344 FEFFFFEB 		bl	ic_enable
 197:../src/main.c **** 	ic_enable(INT_EINT1);
 3148              		.loc 1 197 0
 3149 0348 1800A0E3 		mov	r0, #24
 3150 034c FEFFFFEB 		bl	ic_enable
 198:../src/main.c **** 
 199:../src/main.c **** 	Delay(0);
 3151              		.loc 1 199 0
 3152 0350 0000A0E3 		mov	r0, #0
 3153 0354 FEFFFFEB 		bl	Delay
 200:../src/main.c **** 	return 0;
 3154              		.loc 1 200 0
 3155 0358 0030A0E3 		mov	r3, #0
 201:../src/main.c **** }
 3156              		.loc 1 201 0
 3157 035c 0300A0E1 		mov	r0, r3
 3158 0360 0CD04BE2 		sub	sp, fp, #12
 3159 0364 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3160 0368 1EFF2FE1 		bx	lr
 3161              	.L29:
 3162              		.align	2
 3163              	.L28:
 3164 036c 00000000 		.word	RL
 3165 0370 54FF7F0C 		.word	209715028
 3166 0374 00000000 		.word	timer_ISR
 3167 0378 74FF7F0C 		.word	209715060
 3168 037c 00000000 		.word	button_ISR
 3169              		.cfi_endproc
 3170              	.LFE3:
 3172              		.align	2
 3173              		.global	loop
 3175              	loop:
 3176              	.LFB4:
 202:../src/main.c **** 
 203:../src/main.c **** int loop(void)
 204:../src/main.c **** {
 3177              		.loc 1 204 0
 3178              		.cfi_startproc
 3179              		@ Function supports interworking.
 3180              		@ args = 0, pretend = 0, frame = 0
 3181              		@ frame_needed = 1, uses_anonymous_args = 0
 3182 0380 0DC0A0E1 		mov	ip, sp
 3183              	.LCFI8:
 3184              		.cfi_def_cfa_register 12
 3185 0384 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3186 0388 04B04CE2 		sub	fp, ip, #4
 3187              		.cfi_offset 14, -8
 3188              		.cfi_offset 13, -12
 3189              		.cfi_offset 11, -16
 3190              	.LCFI9:
 3191              		.cfi_def_cfa 11, 4
 205:../src/main.c **** 	return 0;
 3192              		.loc 1 205 0
 3193 038c 0030A0E3 		mov	r3, #0
 206:../src/main.c **** }
 3194              		.loc 1 206 0
 3195 0390 0300A0E1 		mov	r0, r3
 3196 0394 0CD04BE2 		sub	sp, fp, #12
 3197 0398 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3198 039c 1EFF2FE1 		bx	lr
 3199              		.cfi_endproc
 3200              	.LFE4:
 3202              		.align	2
 3203              		.global	main
 3205              	main:
 3206              	.LFB5:
 207:../src/main.c **** 
 208:../src/main.c **** 
 209:../src/main.c **** int main(void)
 210:../src/main.c **** {
 3207              		.loc 1 210 0
 3208              		.cfi_startproc
 3209              		@ Function supports interworking.
 3210              		@ args = 0, pretend = 0, frame = 0
 3211              		@ frame_needed = 1, uses_anonymous_args = 0
 3212 03a0 0DC0A0E1 		mov	ip, sp
 3213              	.LCFI10:
 3214              		.cfi_def_cfa_register 12
 3215 03a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3216 03a8 04B04CE2 		sub	fp, ip, #4
 3217              		.cfi_offset 14, -8
 3218              		.cfi_offset 13, -12
 3219              		.cfi_offset 11, -16
 3220              	.LCFI11:
 3221              		.cfi_def_cfa 11, 4
 211:../src/main.c **** 	setup();
 3222              		.loc 1 211 0
 3223 03ac FEFFFFEB 		bl	setup
 3224              	.L32:
 212:../src/main.c **** 
 213:../src/main.c **** 	while (1) {
 214:../src/main.c **** 		loop();
 3225              		.loc 1 214 0 discriminator 1
 3226 03b0 FEFFFFEB 		bl	loop
 215:../src/main.c **** 	}
 3227              		.loc 1 215 0 discriminator 1
 3228 03b4 FDFFFFEA 		b	.L32
 3229              		.cfi_endproc
 3230              	.LFE5:
 3232              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2760   .data:00000000 $d
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2763   .data:00000000 RL
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2770   .text:00000000 $a
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2773   .text:00000000 timer_ISR
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2848   .text:000000a4 $d
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2852   .text:000000a8 $a
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2855   .text:000000a8 button_ISR
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2973   .text:000001c8 $d
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2978   .text:000001d0 $a
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:2981   .text:000001d0 keyboard_ISR
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:3020   .text:00000210 $d
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:3026   .text:00000220 $a
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:3042   .text:0000023c setup
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:3164   .text:0000036c $d
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:3172   .text:00000380 $a
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:3175   .text:00000380 loop
C:\Users\estib\AppData\Local\Temp\cc7FJ9Rh.s:3205   .text:000003a0 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
D8Led_segment
led1_off
led2_off
led1_switch
led2_switch
Delay
kb_scan
leds_init
D8Led_init
portG_conf
portG_eint_trig
portG_conf_pup
tmr_start
ic_init
ic_conf_irq
ic_conf_fiq
ic_conf_line
ic_enable
